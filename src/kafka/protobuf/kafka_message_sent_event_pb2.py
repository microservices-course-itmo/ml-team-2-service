# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kafka_message_sent_event.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import protobuf.kafka_message_header_pb2 as kafka__message__header__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
    name="kafka_message_sent_event.proto",
    package="",
    syntax="proto3",
    serialized_options=b"\n*com.wine.to.up.catalog.service.api.message",
    create_key=_descriptor._internal_create_key,
    serialized_pb=b'\n\x1ekafka_message_sent_event.proto\x1a\x1akafka_message_header.proto"e\n\x15KafkaMessageSentEvent\x12\x15\n\rtransactionId\x18\x01 \x01(\x05\x12\x0f\n\x07message\x18\x02 \x01(\t\x12$\n\x07headers\x18\x03 \x03(\x0b\x32\x13.KafkaMessageHeaderB,\n*com.wine.to.up.catalog.service.api.messageb\x06proto3',
    dependencies=[kafka__message__header__pb2.DESCRIPTOR,],
)


_KAFKAMESSAGESENTEVENT = _descriptor.Descriptor(
    name="KafkaMessageSentEvent",
    full_name="KafkaMessageSentEvent",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name="transactionId",
            full_name="KafkaMessageSentEvent.transactionId",
            index=0,
            number=1,
            type=5,
            cpp_type=1,
            label=1,
            has_default_value=False,
            default_value=0,
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.FieldDescriptor(
            name="message",
            full_name="KafkaMessageSentEvent.message",
            index=1,
            number=2,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=b"".decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.FieldDescriptor(
            name="headers",
            full_name="KafkaMessageSentEvent.headers",
            index=2,
            number=3,
            type=11,
            cpp_type=10,
            label=3,
            has_default_value=False,
            default_value=[],
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=62,
    serialized_end=163,
)

_KAFKAMESSAGESENTEVENT.fields_by_name[
    "headers"
].message_type = kafka__message__header__pb2._KAFKAMESSAGEHEADER
DESCRIPTOR.message_types_by_name["KafkaMessageSentEvent"] = _KAFKAMESSAGESENTEVENT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

KafkaMessageSentEvent = _reflection.GeneratedProtocolMessageType(
    "KafkaMessageSentEvent",
    (_message.Message,),
    {
        "DESCRIPTOR": _KAFKAMESSAGESENTEVENT,
        "__module__": "kafka_message_sent_event_pb2"
        # @@protoc_insertion_point(class_scope:KafkaMessageSentEvent)
    },
)
_sym_db.RegisterMessage(KafkaMessageSentEvent)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
